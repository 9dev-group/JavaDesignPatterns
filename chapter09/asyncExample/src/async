<비동기 패턴> Async Pattern

1. 비동기 패턴이란?
* 호출부를 블러킹하지 않고 메서드를 호출하는 방법에 관한 패턴
* 보통 메서드를 실행하면 그 메서드가 완료될 때까지 해당 메서드를 호출한 코드는 기다려야 함
  그러나 그렇게 작동하면 안 될 경우가 있고 이럴 경우 비동기 패턴 방식을 사용!

2. 비동기 패턴 구현 방법
* 자바는 스레드를 직접 구현할 수 있기 때문에 비동기 코드를 쉽게 구현할 수 있다.
-> design.pattern.async.example1 참고
* 자바 비동기 프로그램의 가장 잘 알려진 보편적인 기술? Future<V> 인터페이스, FutureTask 클래스
- Future은 비동기 처리 결과를 표현하기 위해 사용
- 비동기 처리가 완료되었는지 확인하고 처리 완료를 기다리고 처리 결과를 리턴하는 메소드를 제공
- 예제 치킨 주문하기
가연이가 코딩을 하다가 치킨이 먹고 싶어졌다.
그럴 경우 가연의 행동은?
1. 주문을 한다.
2. 문앞에서 치킨이 올때까지 기다린다.
아니다...
주문을 하고 마저 코딩을 하기도 하고 화장실도 가는등 다른 일을 한다.
이를 비동기적 행동이다. 문앞에서 치킨이 올때까지 기다리는 건 동기적, 블로킹이라고 한다.

위와 같은 행동을 로직으로 짜면?
==================================
Restaurant rest = new Restaurant();
Chicken ck = rest->requestChicken(); //치킨 올때까지 기다림
eat(ck); //치킨를 먹는다.
==================================

비동기적으로 짜면?
==================================
Restaurant rest = new Restaurant();
Future reservationNo = rest->requestChicken(); //전화로 주문하고 예약 번호를 받는다.
booblean b = future->isComplete(); //예약 번호를 통해 배달 완료를 확인할 수 있다.

if(b){
  eat(future->getChicken()); //배달 오면 치킨을 먹는다.
}else{
  ...코딩하거나 화장실을 간다... //배달 안오면 하던일을 한다.
  ... //좀 지나면
  
  while(!future->isComplete()){ //시간이 지나서 배달 올 쯤에 다시 확인한다.
     Sleep(100); //아직 안오면 올때까지 기다린다.
  }
  
  eat(future->getChicken()); //치킨을 먹는다.
}
==================================
이런식으로 Future 객체를 사용하는 것이 Future 패턴이다.
무엇인가 일을 시킨 후 바로 리턴 받고 자기 할일을 한다.
리턴 받은 객체를 통해 간간히 자기가 시킨 일의 결과를 확인한다.
